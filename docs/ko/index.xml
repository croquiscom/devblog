<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ZIGZAG 기술 블로그</title>
    <link>https://devblog.croquis.com/ko/</link>
    <description>Recent content on ZIGZAG 기술 블로그</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 28 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://devblog.croquis.com/ko/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>크로키의 스택 - Thrift</title>
      <link>https://devblog.croquis.com/ko/2019-04-28-1-croquis-stack-thrift/</link>
      <pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.croquis.com/ko/2019-04-28-1-croquis-stack-thrift/</guid>
      <description>&lt;p&gt;2016년 중반 마이크로서비스로의 전환을 결정했습니다.
마이크로서비스는 이론상 다른 서비스에 영향을 주지 않고 내부 기술을 바꿀 수 있습니다.
하지만 마이크로서비스 간의 통신 방법은 한번 결정하면 쉽게 바뀌기 어려울 것 같아서 가장 많이 고민했습니다.
그리고 Thrift를 선택했습니다.
이번 글에서는 그 이유와 이후의 상황에 관해 설명하겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>BotKit을 이용한 슬랙 봇 만들기</title>
      <link>https://devblog.croquis.com/ko/2019-04-27-1-make-slack-bot-using-botkit/</link>
      <pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.croquis.com/ko/2019-04-27-1-make-slack-bot-using-botkit/</guid>
      <description>&lt;p&gt;크로키닷컴을 시작하고 비교적 초기부터 ChatOps를 해보고 싶었습니다.
GitHub의 글을 보고 도입하고 싶다는 생각이 들었던 거로 기억합니다.
당연하게 &lt;a href=&#34;https://hubot.github.com/&#34;&gt;Hubot&lt;/a&gt;을 이용해 채팅봇을 설정했습니다.&lt;/p&gt;

&lt;p&gt;초기에는 HipChat에 Hubot을 붙였고, 2014년 중반 Slack으로 전환했습니다.
봇을 활용하려는 시도는 여러 번 했지만 대부분 장난 수준을 벗어나지 못했고(예. 점심 메뉴 보여주고 임의로 고르기),
그나마 조금 복잡했던 것이 Box, Dropbox, Evernote에서 변경된 내용을 인식해 특정 채널에 알려주는 기능이었습니다.&lt;/p&gt;

&lt;p&gt;그렇게 방치하다가 2019년에 들어와 개발팀 인원도 늘어나서 다시 한번 제대로 채팅봇을 만들자는 얘기가 나왔습니다.
이전에 작업해서 익숙한 Hubot을 다시 사용할까 했는데 아무래도 소스 기반이 CoffeeScript인게 마음에 걸렸습니다.
여러 가지를 찾아보다가 &lt;a href=&#34;https://botkit.ai/&#34;&gt;Botkit&lt;/a&gt;을 사용하기로 결정했습니다.&lt;/p&gt;

&lt;p&gt;이번 글에서는 Botkit을 이용해 슬랙 봇을 만드는 방법을 설명합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>AWS Abuse Report</title>
      <link>https://devblog.croquis.com/ko/2018-11-30-1-aws-abuse-report/</link>
      <pubDate>Thu, 23 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.croquis.com/ko/2018-11-30-1-aws-abuse-report/</guid>
      <description>&lt;p&gt;28일 오전, 한참 작업을 하다가 11시가 조금 넘은 시간에 문득 핸드폰을 들여다봤습니다.
평상시 메일은 몰아서 처리하는 편인데(시급한 일이 메일로 오는 경우는 드물어서) 이날은 왠지 메일에 눈이 갔습니다.
AWS에서 보낸 메일이 보였는데, 자주 오던 광고성 메일은 아니었고 Maintenance 알림 메일인가 하고 넘어가려는 순간
불안한 단어 &lt;strong&gt;Abuse&lt;/strong&gt;가 눈에 들어왔습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>분석용 이벤트 로그 점검/정리하기 2</title>
      <link>https://devblog.croquis.com/ko/2018-08-23-1-check-analytics-2/</link>
      <pubDate>Thu, 23 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.croquis.com/ko/2018-08-23-1-check-analytics-2/</guid>
      <description>&lt;p&gt;안녕하세요! 저는 개발팀의 오형준입니다. 앞선 글에서 데이터팀의 지형님께서 ‘분석용 이벤트 로그 점검/정리하기’라는 Task가 어떤 Task이며, 왜 중요한지에 대해 다루었다면, 이번 글에서는 이번 Task의 프로세스, 앱개발팀과 데이터팀 간의 협업 방식, 각 팀의 업무 방식 등에 대해 다루어 보려합니다!&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>분석용 이벤트 로그 점검/정리하기 1</title>
      <link>https://devblog.croquis.com/ko/2018-07-10-1-check-analytics-1/</link>
      <pubDate>Tue, 10 Jul 2018 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.croquis.com/ko/2018-07-10-1-check-analytics-1/</guid>
      <description>&lt;p&gt;지그재그는 누적 다운로드 수 1,100만, MAU 200만을 넘어가고 있는 여성 쇼핑몰 모음 앱 서비스입니다. 그렇기 때문에 매일같이 지그재그에 쌓여가는 이용자들의 데이터 로그들도 어마어마하죠.&lt;/p&gt;

&lt;p&gt;이와 같은 로그들은 이용자들이 각자 자신에게 맞는 쇼핑몰/상품을 더 쉽게, 편하게 찾을 수 있도록 도와주는 개인화 알고리즘의 핵심 자원이면서, 이용자들이 앱의 각 기능들을 잘 활용하고 있는지 파악하기 위한 사용성 분석에도 필수적입니다. 또한 서비스 운영에 영향을 줄 수 있는 각종 이상 현상을 실시간으로 탐지하며 대응할 수 있게 도와주죠. 이를 위해 지그재그에서는 불필요한 로그/개인정보를 수집하지 않으면서도 앞선 목적에 부합하는 로그만 효율적으로 쌓아나가기 위해 노력하고 있습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>크로키의 스택 - REST API</title>
      <link>https://devblog.croquis.com/ko/2018-05-30-1-croquis-stack-rest-api/</link>
      <pubDate>Wed, 30 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.croquis.com/ko/2018-05-30-1-croquis-stack-rest-api/</guid>
      <description>&lt;p&gt;크로키가 클라이언트-서버 아키텍처를 가진 첫 번째 서비스 개발을 시작한 것은 2012년이었습니다.
클라이언트에서 서버와 통신할 방법이 필요했는데 당시의 대세는 REST API였습니다.
저도 거기에 공감했기 때문에 REST API를 만들어 클라이언트를 구현했습니다.
그 후로 모든 서비스는 기본적으로 REST API로 클라이언트와 서버가 통신하고 있습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>젠킨스 작업을 정의하는 방식들</title>
      <link>https://devblog.croquis.com/ko/2018-02-27-1-jenkins-job-styles/</link>
      <pubDate>Tue, 27 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.croquis.com/ko/2018-02-27-1-jenkins-job-styles/</guid>
      <description>&lt;p&gt;오늘날의 소프트웨어 개발에 있어서 지속적 통합(continuous integration)은
필수라고 할 수 있습니다.
저도 당연히 동의하면서 오래전부터 도입하려고 했지만, 급한 일에 밀려 실제로 도입한 것은
지그재그 서비스를 오픈하고 나서도 2년이나 지난 작년 여름무렵입니다.&lt;/p&gt;

&lt;p&gt;여러가지 고민한 끝에 CI에 &lt;a href=&#34;https://jenkins.io/&#34;&gt;젠킨스&lt;/a&gt;를 사용하기로 결정했습니다.
그런데 서비스에 적용하기 위해서 각종 문서를 찾아보는데
문서별로 작업을 정의하는 방식이 너무 달라서 굉장히 혼란스러웠습니다.&lt;/p&gt;

&lt;p&gt;이번 글에서는 저와 같이 혼란을 겪으시는 분들을 위해 젠킨스의 작업 정의 방식들에 대해서 설명하려고 합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>지그재그 개발팀은...</title>
      <link>https://devblog.croquis.com/ko/2018-01-23-1-zigzag-devteam-is/</link>
      <pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.croquis.com/ko/2018-01-23-1-zigzag-devteam-is/</guid>
      <description>&lt;p&gt;지그재그에서는 최고의 개발팀을 만들기 위해 항상 노력하고 있습니다.
이 글에서는 지그재그 개발팀의 문화와 관심사에 대해서 소개하고 있습니다.
지그재그 서비스에 대해서는 하단의 소개를 참고해주세요.&lt;/p&gt;

&lt;p&gt;이 글을 읽고 저희 개발팀에 관심이 생기신 분은 언제든지 &lt;a href=&#34;mailto:job@zigzag.kr&#34;&gt;job@zigzag.kr&lt;/a&gt; 으로 연락주세요.
이력서를 보내주셔도 좋고, 깃허브 주소를 보내주셔도 좋습니다.
그 외 문의사항이나 가볍게 나누고 싶으신 이야기들은 &lt;a href=&#34;https://www.facebook.com/zigzagcareer&#34;&gt;https://www.facebook.com/zigzagcareer&lt;/a&gt; 를 통해서 문의해주시면 됩니다.
지그재그 팀과 함께 수면 아래 숨겨진 가치를 찾아내는 멋진 경험에 동참할 팀원을 기다립니다.&lt;/p&gt;

&lt;p&gt;지그재그 현재 진행중인 개발팀의 채용 공고는 &lt;a href=&#34;https://career.zigzag.kr/recruit/&#34;&gt;여기&lt;/a&gt;서 보실 수 있습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>크로키의 스택 - 마이크로서비스</title>
      <link>https://devblog.croquis.com/ko/2017-10-15-1-croquis-stack-microservice/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.croquis.com/ko/2017-10-15-1-croquis-stack-microservice/</guid>
      <description>&lt;p&gt;지그재그 서비스는 모놀리식 아키텍처(Monolithic Architecture)에서
마이크로서비스 아키텍처(Microservice Architecture)로 전환중에 있습니다.
이번 글에서는 그 과정을 설명하려고 합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>SQS, Lambda를 이용한 작업 대기열 만들기</title>
      <link>https://devblog.croquis.com/ko/2017-05-13-1-aws-serverless-1/</link>
      <pubDate>Sat, 13 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.croquis.com/ko/2017-05-13-1-aws-serverless-1/</guid>
      <description>&lt;p&gt;최근 클라우드 컴퓨팅환경이 널리 사용되면서 서버 하드웨어 대한 유지보수 및 구성을 신경 쓰지 않고, 다양한 서비스들을 위한 서버를 개발할 수 있게 되었습니다. 하지만 이런 환경을 사용함에도 auto-scaling이나 서버 로그 수집, 서비스 배포 및 관리 등 소프트웨어 스택에 관한 부분은 신경 써줘야 합니다.&lt;/p&gt;

&lt;p&gt;이러한 고민을 덜어주기 위해서 최근에는 serverless architecture라는 개념이 생기고 있습니다. serverless architecture에서는 소스코드와 몇 번의 클릭만으로 서비스를 위한 REST API를 만들 수 있고, 수많은 요청에 대한 확장성에 대해 고민을 할 필요가 없으며, 로그 및 다양한 모니터링 툴들을 추가적인 작업 없이 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;AWS에서도 serverless architecture를 위한 다양한 서비스를 제공하고 있습니다. 이번 글에서는 간단한 작업 대기열(task queue)을 만들어보며, serverless architecture 환경을 경험해보도록 하겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>webpack, TypeScript, Mithril을 사용하는 프로젝트 생성 튜토리얼</title>
      <link>https://devblog.croquis.com/ko/2017-04-11-1-webpack-setup-tutorial-with-typescript-and-mithril/</link>
      <pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.croquis.com/ko/2017-04-11-1-webpack-setup-tutorial-with-typescript-and-mithril/</guid>
      <description>&lt;p&gt;클라이언트 JavaScript 개발 환경은 빠르게 변화하고 있습니다.
다양한 관련 기술 중 빌드 툴 쪽에서 최근 가장 주목 받는 것은 &lt;a href=&#34;https://webpack.js.org/&#34;&gt;webpack&lt;/a&gt;이라고 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;webpack 전체는 굉장히 방대하기 때문에 한번에 이해하기가 쉽지 않습니다.
인터넷에 이미 잘 구성된 설정파일이 많긴 하지만,
기본적인 설정에 대해서 알아두면 많은 도움이 됩니다.&lt;/p&gt;

&lt;p&gt;이번 글에서는 크로키에서 사용하는 &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt;,
&lt;a href=&#34;https://mithril.js.org/&#34;&gt;Mithril&lt;/a&gt; 환경에 맞는 webpack 설정을 갖추는 과정을
단계별로 설명합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>크로키의 스택 - Mithril</title>
      <link>https://devblog.croquis.com/ko/2017-04-07-1-croquis-stack-mithril/</link>
      <pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.croquis.com/ko/2017-04-07-1-croquis-stack-mithril/</guid>
      <description>&lt;p&gt;이번 글에서는 크로키가 사용하는 스택 중
클라이언트 JavaScript 프레임워크(client-side JavaScript framework)에 대해서
소개해볼까 합니다.&lt;/p&gt;

&lt;p&gt;TD;DR) 크로키에서는 &lt;a href=&#34;http://backbonejs.org/&#34;&gt;Backbone&lt;/a&gt;, &lt;a href=&#34;http://angular.io/&#34;&gt;Angular&lt;/a&gt;를 거쳐
현재는 &lt;a href=&#34;http://mithril.js.org/&#34;&gt;Mithril&lt;/a&gt;이라는 프레임워크를 사용하고 있습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>크로키가 Node.js를 선택한 이유</title>
      <link>https://devblog.croquis.com/ko/2017-02-10-1-why-croquis-selects-nodejs/</link>
      <pubDate>Fri, 10 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.croquis.com/ko/2017-02-10-1-why-croquis-selects-nodejs/</guid>
      <description>&lt;p&gt;현재 크로키에서는 서버용 웹 프레임워크로 &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; 위에서
&lt;a href=&#34;http://expressjs.com/&#34;&gt;Express&lt;/a&gt;를 사용하고 있습니다.&lt;/p&gt;

&lt;p&gt;이번 글에서는 어떤 이유로 Node.js를 사용하게 되었는지 설명하려고 합니다.
여러분들이 웹 프레임워크를 선택하시는 데 참고가 되었으면 합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Node.js로 유닉스 파이프 처리하기</title>
      <link>https://devblog.croquis.com/ko/2017-01-15-1-process-unix-pipe-with-nodejs/</link>
      <pubDate>Sun, 15 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.croquis.com/ko/2017-01-15-1-process-unix-pipe-with-nodejs/</guid>
      <description>&lt;p&gt;크로키에서는 로그를 JSON 문자열로 만들어 일자별(혹은 시간별)로 묶은 후
gzip으로 압축해서 저장하고 있습니다.
그런데 이미 만들어진 로그를 수정해야 하는 일이 생겼습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GitHub 위키 이벤트를 슬랙으로 받기</title>
      <link>https://devblog.croquis.com/ko/2017-01-06-1-github-wiki-to-slack/</link>
      <pubDate>Fri, 06 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.croquis.com/ko/2017-01-06-1-github-wiki-to-slack/</guid>
      <description>&lt;p&gt;현재 크로키닷컴은 프로젝트 관리를 GitHub로만 하고 있습니다.
이슈도 GitHub 이슈로 관리하고, 문서도 GitHub 위키를 사용하고 있습니다.&lt;/p&gt;

&lt;p&gt;GitHub는 슬랙과의 연동이 잘 되어 있어서 GitHub에서의 활동을
슬랙을 통해 파악하고 대응하고 있습니다.
하지만 아쉽게도 GitHub 위키 이벤트는 처리하지 않습니다.
그래서 자체적으로 GitHub 위키 이벤트를 슬랙으로 알려주는 서비스를 만들었습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>iOS에서 년도를 구할 때 비정상적인 값이 나오는 문제</title>
      <link>https://devblog.croquis.com/ko/2017-01-05-1-ios-calendar/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.croquis.com/ko/2017-01-05-1-ios-calendar/</guid>
      <description>&lt;p&gt;지그재그 앱을 사용하는 사용자를 분석할 때 사용하기 위해서
최근 업데이트에 나이를 입력받는 화면이 추가되었습니다.&lt;/p&gt;

&lt;p&gt;입력은 나이를 받지만 나이는 매년 달라지기 때문에 고정된 값인 태어난 년도로 변환하여 저장하고 있습니다.
그런데 대부분은 정상적인 년도가 들어오는데 일부 사용자의 태어난 년도가 10이하 또는 2500이상인 문제가 있었습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>croquis.com 개발자 블로그를 시작합니다.</title>
      <link>https://devblog.croquis.com/ko/2017-01-01-1-start-devblog/</link>
      <pubDate>Sun, 01 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.croquis.com/ko/2017-01-01-1-start-devblog/</guid>
      <description>&lt;p&gt;안녕하세요.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://zigzag.kr/&#34;&gt;지그재그&lt;/a&gt;라는 여성 쇼핑몰 서비스를
운영하고 있는 croquis.com의 개발팀입니다.&lt;/p&gt;

&lt;p&gt;방치되어 있던 개발자 블로그를 다시 시작하려고 합니다.
기대해주세요~&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>