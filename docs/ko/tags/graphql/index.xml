<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GraphQL on 카카오스타일 기술 블로그</title>
    <link>https://devblog.kakaostyle.com/ko/tags/graphql/</link>
    <description>Recent content in GraphQL on 카카오스타일 기술 블로그</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 09 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://devblog.kakaostyle.com/ko/tags/graphql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GraphQL 이해하기: (3) 리졸버의 이해</title>
      <link>https://devblog.kakaostyle.com/ko/2022-11-09-1-understanding-graphql-3-understanding-resolver/</link>
      <pubDate>Wed, 09 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.kakaostyle.com/ko/2022-11-09-1-understanding-graphql-3-understanding-resolver/</guid>
      <description>&lt;p&gt;GraphQL 스키마를 정의했고, 클라이언트에서 온 요청을 서버가 처리하기 위해 필요한 기술을 알아봤습니다. 이제 클라이언트에서 온 요청에 따라 적절한 데이터를 반환하는 과정이 남았습니다. 이는 리졸버(resolver)라는 것이 담당합니다. Java쪽에서는 데이터 페처(data fetcher)라고도 부릅니다. 리졸버를 완전히 이해하면 GraphQL을 전부를 알았다고 할만큼 GraphQL의 핵심이라고 볼 수 있습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GraphQL 이해하기: (2) 실행 및 전송</title>
      <link>https://devblog.kakaostyle.com/ko/2022-11-07-1-understanding-graphql-2-execution/</link>
      <pubDate>Mon, 07 Nov 2022 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.kakaostyle.com/ko/2022-11-07-1-understanding-graphql-2-execution/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://devblog.kakaostyle.com/ko/2022-10-04-1-understanding-graphql-1-schema/&#34;&gt;이전 글&lt;/a&gt;에서 GraphQL 스키마를 정의했습니다. 이제 이 스키마에 질의를 하고 그 결과를 받을 수 있습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GraphQL 이해하기: (1) 스키마 정의</title>
      <link>https://devblog.kakaostyle.com/ko/2022-10-04-1-understanding-graphql-1-schema/</link>
      <pubDate>Tue, 04 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.kakaostyle.com/ko/2022-10-04-1-understanding-graphql-1-schema/</guid>
      <description>GraphQL은 query 방식만 정의한 단순한 스펙입니다. 하지만 개념이 간단하다고 그것을 동작하도록 구현하는 것까지 간단한 것은 아닙니다. GraphQL을 실제 제품에 적용하기까지는 많은 것들을 이해해야 합니다. 이에 대해 차례로 설명해보려고 합니다. 첫번째로 다뤄볼 내용은 스키마 정의입니다.</description>
    </item>
    
    <item>
      <title>Server Driven UI 설계를 통한 UI 유연화</title>
      <link>https://devblog.kakaostyle.com/ko/2021-12-16-1-server-driven-ui/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.kakaostyle.com/ko/2021-12-16-1-server-driven-ui/</guid>
      <description>&lt;p&gt;웹과 달리 네이티브 모바일 앱은 빌드, 배포 후에는 수정이 불가능합니다.
만약 잘못된 위치에 버튼을 배치한 채로 스토어에 앱을 배포했다면,
그리고 사용자가 잘못된 버전의 앱을 설치했다면 버튼의 위치를 수정할 방법이 없습니다.
유일한 방법은 사용자가 스스로 스토어에 들어가 수정된 버전의 앱으로 업데이트하는 것 뿐입니다.&lt;/p&gt;
&lt;p&gt;배포 후 수정이 불가능하다는 특성이 부딪히는 또 다른 상황은 A/B 테스트입니다.
소프트웨어를 사용하는 동안 일어나는 사용자의 행동과 경험은 화면 구성이나 문구에 따라 크게 달라지기 때문에 최적의 화면을 디자인하는 것이 중요합니다.
그런데 사용자의 행동과 경험을 예측하는 것은 너무 어려운 일이기 때문에 현실의 사용자들에게 다양한 유형의 UI를 제공하고,
어떤 UI가 적합한지 실측할 필요가 있습니다.
실제로 카카오스타일을 비롯한 많은 소프트웨어 기업들이 사용자를 A, B 그룹으로 나누고 (더 많은 그룹으로 나눌 수도 있습니다)
각 그룹에게 서로 다른 UI를 제공해 가장 적합한 UI를 선정하는 A/B 테스트를 진행하고 있습니다.&lt;/p&gt;
&lt;p&gt;유연한 UI를 제공하려면 UI가 클라이언트의 빌드와 배포로부터 자유로워야 합니다.
이러한 목표를 이루기 위해 웹뷰와 같이 네이티브 환경을 벗어난 다양한 방법을 선택할 수도 있겠지만,
현실에서는 다양한 이유로 웹뷰를 사용할 수 없는 상황이 있습니다.
이 글에서는 간단한 예시를 통해 Server Driven UI의 개념에 대해 설명하고,
네이티브 모바일 앱의 UI를 유연하게 다루기 위해 카카오스타일의 지그재그UX그룹이 Server Driven UI 설계를 어떻게 사용하고 있는지 소개하고자 합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GraphQL 에러 처리 규칙</title>
      <link>https://devblog.kakaostyle.com/ko/2021-07-31-1-graphql-error-guide/</link>
      <pubDate>Sat, 31 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.kakaostyle.com/ko/2021-07-31-1-graphql-error-guide/</guid>
      <description>&lt;p&gt;Java로 코드를 작성해보신 분이라면 throws에 의해 컴파일 에러가 발생했을 때 뭔지는 잘 모르겠고 IDE가 제시한 대로 catch로 감싸고 넘어간 경험이 누구에게나 있을 것이라 생각합니다. 그만큼 예외 상황은 잘 이해하고 적절히 처리하기는 쉽지 않은 것 같습니다. 오늘은 카카오스타일이 사용하고 있는 GraphQL에서 에러를 어떻게 전달하고 처리하고 있는지 설명하려고 합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GraphQL in depth (serverside)</title>
      <link>https://devblog.kakaostyle.com/ko/2019-09-19-1-graphql-in-depth-serverside/</link>
      <pubDate>Thu, 19 Sep 2019 01:00:00 +0000</pubDate>
      
      <guid>https://devblog.kakaostyle.com/ko/2019-09-19-1-graphql-in-depth-serverside/</guid>
      <description>&lt;p&gt;7월에 크로키닷컴 팀원을 대상으로 발표한 자료입니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>크로키의 스택 - GraphQL</title>
      <link>https://devblog.kakaostyle.com/ko/2019-05-22-1-croquis-stack-graphql/</link>
      <pubDate>Wed, 22 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.kakaostyle.com/ko/2019-05-22-1-croquis-stack-graphql/</guid>
      <description>&lt;p&gt;현재 크로키는 API를 &lt;a href=&#34;https://graphql.org/&#34;&gt;GraphQL&lt;/a&gt;로 만들고 있습니다.
아직 많은 부분에 대해서 연구 중이어서 현재 상황만 간단하게 정리해 보겠습니다.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
