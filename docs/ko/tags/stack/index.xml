<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Stack on ZIGZAG 기술 블로그</title>
    <link>https://devblog.croquis.com/ko/tags/stack/</link>
    <description>Recent content in Stack on ZIGZAG 기술 블로그</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 28 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://devblog.croquis.com/ko/tags/stack/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>크로키의 스택 - Thrift</title>
      <link>https://devblog.croquis.com/ko/2019-04-28-1-croquis-stack-thrift/</link>
      <pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.croquis.com/ko/2019-04-28-1-croquis-stack-thrift/</guid>
      <description>&lt;p&gt;2016년 중반 마이크로서비스로의 전환을 결정했습니다.
마이크로서비스는 이론상 다른 서비스에 영향을 주지 않고 내부 기술을 바꿀 수 있습니다.
하지만 마이크로서비스 간의 통신 방법은 한번 결정하면 쉽게 바뀌기 어려울 것 같아서 가장 많이 고민했습니다.
그리고 Thrift를 선택했습니다.
이번 글에서는 그 이유와 이후의 상황에 관해 설명하겠습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>크로키의 스택 - REST API</title>
      <link>https://devblog.croquis.com/ko/2018-05-30-1-croquis-stack-rest-api/</link>
      <pubDate>Wed, 30 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.croquis.com/ko/2018-05-30-1-croquis-stack-rest-api/</guid>
      <description>&lt;p&gt;크로키가 클라이언트-서버 아키텍처를 가진 첫 번째 서비스 개발을 시작한 것은 2012년이었습니다.
클라이언트에서 서버와 통신할 방법이 필요했는데 당시의 대세는 REST API였습니다.
저도 거기에 공감했기 때문에 REST API를 만들어 클라이언트를 구현했습니다.
그 후로 모든 서비스는 기본적으로 REST API로 클라이언트와 서버가 통신하고 있습니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>크로키의 스택 - 마이크로서비스</title>
      <link>https://devblog.croquis.com/ko/2017-10-15-1-croquis-stack-microservice/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.croquis.com/ko/2017-10-15-1-croquis-stack-microservice/</guid>
      <description>&lt;p&gt;지그재그 서비스는 모놀리식 아키텍처(Monolithic Architecture)에서
마이크로서비스 아키텍처(Microservice Architecture)로 전환중에 있습니다.
이번 글에서는 그 과정을 설명하려고 합니다.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>크로키의 스택 - Mithril</title>
      <link>https://devblog.croquis.com/ko/2017-04-07-1-croquis-stack-mithril/</link>
      <pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://devblog.croquis.com/ko/2017-04-07-1-croquis-stack-mithril/</guid>
      <description>&lt;p&gt;이번 글에서는 크로키가 사용하는 스택 중
클라이언트 JavaScript 프레임워크(client-side JavaScript framework)에 대해서
소개해볼까 합니다.&lt;/p&gt;

&lt;p&gt;TD;DR) 크로키에서는 &lt;a href=&#34;http://backbonejs.org/&#34;&gt;Backbone&lt;/a&gt;, &lt;a href=&#34;http://angular.io/&#34;&gt;Angular&lt;/a&gt;를 거쳐
현재는 &lt;a href=&#34;http://mithril.js.org/&#34;&gt;Mithril&lt;/a&gt;이라는 프레임워크를 사용하고 있습니다.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>