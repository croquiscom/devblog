<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UI on 카카오스타일 기술 블로그</title>
    <link>https://devblog.kakaostyle.com/ko/tags/ui/</link>
    <description>Recent content in UI on 카카오스타일 기술 블로그</description>
    <generator>Hugo</generator>
    <language>ko</language>
    <lastBuildDate>Sun, 04 Aug 2024 01:00:00 +0000</lastBuildDate>
    <atom:link href="https://devblog.kakaostyle.com/ko/tags/ui/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Server Driven UI 호출 구조 개선</title>
      <link>https://devblog.kakaostyle.com/ko/2024-08-04-1-improve-server-driven-ui/</link>
      <pubDate>Sun, 04 Aug 2024 01:00:00 +0000</pubDate>
      <guid>https://devblog.kakaostyle.com/ko/2024-08-04-1-improve-server-driven-ui/</guid>
      <description>&lt;p&gt;카카오스타일에서는 &lt;a href=&#34;https://devblog.kakaostyle.com/ko/2021-12-16-1-server-driven-ui&#34;&gt;서버 드리븐 UI(Server Driven UI, 이하 SDUI)&lt;/a&gt;를 통해 UI의 유연성을 가져가고 있습니다. 서버가 클라이언트 UI를 동적으로 제어하므로써 빌드 및 배포 없이도 UI 업데이트를 할 수 있고, A/B 테스트도 효율적으로 수행할 수 있었습니다. 다만 이렇게 구축된 시스템을 몇년간 운영하다보니 몇가지 문제점이 발생했습니다.&lt;/p&gt;&#xA;&lt;p&gt;이 글에서는 초기 구조에서 어떤 문제가 발생했는지 살펴보고, 전시팀에서 어떤 방식으로 개선해 나갔는지에 대해 이야기 해보려고 합니다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Server Driven UI 설계를 통한 UI 유연화</title>
      <link>https://devblog.kakaostyle.com/ko/2021-12-16-1-server-driven-ui/</link>
      <pubDate>Thu, 16 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://devblog.kakaostyle.com/ko/2021-12-16-1-server-driven-ui/</guid>
      <description>&lt;p&gt;웹과 달리 네이티브 모바일 앱은 빌드, 배포 후에는 수정이 불가능합니다.&#xA;만약 잘못된 위치에 버튼을 배치한 채로 스토어에 앱을 배포했다면,&#xA;그리고 사용자가 잘못된 버전의 앱을 설치했다면 버튼의 위치를 수정할 방법이 없습니다.&#xA;유일한 방법은 사용자가 스스로 스토어에 들어가 수정된 버전의 앱으로 업데이트하는 것 뿐입니다.&lt;/p&gt;&#xA;&lt;p&gt;배포 후 수정이 불가능하다는 특성이 부딪히는 또 다른 상황은 A/B 테스트입니다.&#xA;소프트웨어를 사용하는 동안 일어나는 사용자의 행동과 경험은 화면 구성이나 문구에 따라 크게 달라지기 때문에 최적의 화면을 디자인하는 것이 중요합니다.&#xA;그런데 사용자의 행동과 경험을 예측하는 것은 너무 어려운 일이기 때문에 현실의 사용자들에게 다양한 유형의 UI를 제공하고,&#xA;어떤 UI가 적합한지 실측할 필요가 있습니다.&#xA;실제로 카카오스타일을 비롯한 많은 소프트웨어 기업들이 사용자를 A, B 그룹으로 나누고 (더 많은 그룹으로 나눌 수도 있습니다)&#xA;각 그룹에게 서로 다른 UI를 제공해 가장 적합한 UI를 선정하는 A/B 테스트를 진행하고 있습니다.&lt;/p&gt;&#xA;&lt;p&gt;유연한 UI를 제공하려면 UI가 클라이언트의 빌드와 배포로부터 자유로워야 합니다.&#xA;이러한 목표를 이루기 위해 웹뷰와 같이 네이티브 환경을 벗어난 다양한 방법을 선택할 수도 있겠지만,&#xA;현실에서는 다양한 이유로 웹뷰를 사용할 수 없는 상황이 있습니다.&#xA;이 글에서는 간단한 예시를 통해 Server Driven UI의 개념에 대해 설명하고,&#xA;네이티브 모바일 앱의 UI를 유연하게 다루기 위해 카카오스타일의 지그재그UX그룹이 Server Driven UI 설계를 어떻게 사용하고 있는지 소개하고자 합니다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
